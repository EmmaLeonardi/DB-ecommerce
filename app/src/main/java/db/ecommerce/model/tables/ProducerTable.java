package db.ecommerce.model.tables;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import db.ecommerce.model.Producer;
import db.ecommerce.model.ProducerPK;
import db.ecommerce.utils.DateConverter;

public class ProducerTable implements Table<ProducerPK, Integer> {

    private final Connection conn;
    private final static String TABLE_NAME = "PRODUTTORI";

    /**
     * @param conn the connection to the db
     */
    public ProducerTable(Connection conn) {
        this.conn = conn;
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }

    @Override
    public boolean createTable() {
        final String query = "CREATE TABLE" + TABLE_NAME + "(" + "Cod_produttore int not null auto_increment,"
                + "Codice_fiscale char(16) not null," + "Nome varchar(20) not null," + "Cognome varchar(20) not null,"
                + "Data_di_nascita date not null," + "Partita_IVA varchar(25) not null,"
                + "constraint IDPRODUTTORE primary key (Cod_produttore))";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.executeUpdate(query);
            return true;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public boolean dropTable() {
        final String query = "DROP TABLE " + TABLE_NAME;
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.executeUpdate(query);
            return true;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public Optional<ProducerPK> findByPrimaryKey(Integer primaryKey) {
        final String query = "SELECT * FROM " + TABLE_NAME + " WHERE Cod_produttore=?";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, primaryKey);
            var result = statement.executeQuery();
            return convertResultSet(result).stream().findFirst();
        } catch (final SQLException e) {
            return Optional.empty();
        }
    }

    private List<ProducerPK> convertResultSet(ResultSet result) {
        final List<ProducerPK> list = new ArrayList<>();
        if (result != null) {
            try {
                while (result.next()) {
                    list.add(new ProducerPK(result.getInt("Cod_produttore"), result.getString("Codice_fiscale"),
                            result.getString("Nome"), result.getString("Cognome"),
                            DateConverter.sqlDateToDate(result.getDate("Data_di_nascita")),
                            result.getString("Partita_IVA")));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return list;
    }

    @Override
    public List<ProducerPK> findAll() {
        final String query = "SELECT * FROM " + TABLE_NAME;
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            var result = statement.executeQuery();
            return convertResultSet(result);
        } catch (final SQLException e) {
            return List.of();
        }
    }

    /**
     * Saves the Producer into the db
     */
    public boolean save(Producer value) {
        final String query = "INSERT INTO (Codice_fiscale, Nome, Cognome," + " Data_di_nascita, Partita_IVA) VALUES "
                + TABLE_NAME + "(?,?,?,?,?)";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setString(1, value.getCodFis());
            statement.setString(2, value.getName());
            statement.setDate(3, DateConverter.dateToSqlDate(value.getDateBirth()));
            statement.setString(4, value.getPIVA());
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

    /**
     * {@inheritDoc} Since the Cod_produttore is a value generated by the Database,
     * all ProducerPK will be cast to Producer and Cod_producer values will be
     * ignored
     */
    @Override
    public boolean save(ProducerPK value) {
        return this.save(ProducerPK.convertToProducer(value));
    }
    
    /**
     * This method return the last Cod producer inserted into the db. This operation
     * is safe if the latest insertion was possibile and no other insertions were
     * made meanwhile this method was called
     * 
     * @returns the Cod Producer or -1 if the db is empty
     */
    public int getLastProducerSaved() {

        final String query = "SELECT * FROM " + TABLE_NAME + " ORDER BY DESC";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            var result = statement.executeQuery();
            if (result != null && convertResultSet(result).stream().findFirst().isPresent()) {
                return convertResultSet(result).stream().findFirst().get().getCod_produttore();
            } else {
                return -1;
            }

        } catch (final SQLException e) {
            return -1;
        }

    }

    @Override
    public boolean update(ProducerPK value) {
        final String query = "UPDATE " + TABLE_NAME + " SET Codice_fiscale=?, Nome=?, Cognome=?,"
                + " Data_di_nascita=?, Partita_IVA=? WHERE Cod_produttore=?";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setString(1, value.getCodFis());
            statement.setString(2, value.getName());
            statement.setDate(3, DateConverter.dateToSqlDate(value.getDateBirth()));
            statement.setString(4, value.getPIVA());
            statement.setInt(5, value.getCod_produttore());
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public boolean delete(Integer primaryKey) {
        final String query = "DELETE FROM " + TABLE_NAME + " WHERE Cod_produttore=?";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, primaryKey);
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

}
