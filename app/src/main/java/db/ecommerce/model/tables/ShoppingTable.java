package db.ecommerce.model.tables;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import db.ecommerce.model.ClientPK;
import db.ecommerce.model.Shopping;
import db.ecommerce.model.ShoppingPK;

public class ShoppingTable implements Table<ShoppingPK, Integer> {

    private final Connection conn;
    private final static String TABLE_NAME = "SPESE";

    /**
     * @param conn the connection to the db
     */
    public ShoppingTable(Connection conn) {
        this.conn = conn;
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }

    @Override
    public boolean createTable() {
        final String query = "CREATE TABLE" + TABLE_NAME + " (Cod_spesa bigint not null auto_increment,)"
                + "Costo decimal(6,2) not null," + "Cod_cliente int not null,"
                + "constraint IDSPESA_ID primary key (Cod_spesa))";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.executeUpdate(query);
            return true;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public boolean dropTable() {
        final String query = "DROP TABLE " + TABLE_NAME;
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.executeUpdate(query);
            return true;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public Optional<ShoppingPK> findByPrimaryKey(Integer primaryKey) {
        final String query = "SELECT * FROM " + TABLE_NAME + " WHERE Cod_spesa=?";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, primaryKey);
            var result = statement.executeQuery();
            return convertResultSet(result).stream().findFirst();
        } catch (final SQLException e) {
            return Optional.empty();
        }
    }

    private List<ShoppingPK> convertResultSet(ResultSet result) {
        final List<ShoppingPK> list = new ArrayList<>();
        if (result != null) {
            try {
                while (result.next()) {
                    list.add(new ShoppingPK(result.getInt("Cod_cliente"), result.getDouble("Costo"),
                            result.getInt("Cod_spesa")));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return list;
    }

    @Override
    public List<ShoppingPK> findAll() {
        final String query = "SELECT * FROM " + TABLE_NAME;
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            var result = statement.executeQuery();
            return convertResultSet(result);
        } catch (final SQLException e) {
            return List.of();
        }
    }

    /**
     * Saves the Shopping into the db
     */
    public Optional<ShoppingPK> save(Shopping value) {
        final String query = "INSERT INTO (Costo,Cod_cliente) " + TABLE_NAME + " VALUES (?,?)";

        try (final PreparedStatement statement = this.conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            statement.setDouble(1, value.getPrice());
            statement.setInt(2, value.getCodCliente());
            final var r = statement.executeUpdate();
            if (r == 1) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return Optional.ofNullable(new ShoppingPK(value, generatedKeys.getInt(1)));
                    }
                }
            }
        } catch (final SQLException e) {
            return Optional.empty();
        }
        return Optional.empty();
    }

    /**
     * {@inheritDoc} Since the Cod_spesa is a value generated by the Database, all
     * ShoppingPK will be cast to Shopping and Cod_spesa values will be ignored
     */
    @Override
    public Optional<ShoppingPK> save(ShoppingPK value) {
        return this.save(ShoppingPK.convertToShopping(value));
    }

    @Override
    public boolean update(ShoppingPK value) {
        final String query = "UPDATE " + TABLE_NAME + " SET Costo=?,Cod_cliente=? WHERE Cod_spesa=?";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setDouble(1, value.getPrice());
            statement.setInt(2, value.getCodCliente());
            statement.setInt(3, value.getCodSpesa());
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public boolean delete(Integer primaryKey) {
        final String query = "DELETE FROM " + TABLE_NAME + " WHERE Cod_spesa=?";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, primaryKey);
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

    /**
     * @param the Client
     * @return all the shoppings made by client given
     */
    public List<ShoppingPK> allShoppingOfClient(ClientPK c) {
        final String query = "SELECT * FROM " + TABLE_NAME + " WHERE Cod_cliente=?";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, c.getCod_cliente());
            var result = statement.executeQuery();
            if (result != null) {
                return convertResultSet(result);
            } else {
                return List.of();
            }

        } catch (final SQLException e) {
            return List.of();
        }

    }

}
