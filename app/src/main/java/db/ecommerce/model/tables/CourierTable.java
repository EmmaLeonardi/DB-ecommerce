package db.ecommerce.model.tables;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import db.ecommerce.model.Courier;
import db.ecommerce.model.CourierPK;
import db.ecommerce.utils.DateConverter;

public class CourierTable implements Table<CourierPK, Integer> {

    private final Connection conn;
    private final static String TABLE_NAME = "CORRIERI";

    /**
     * @param conn the connection to the db
     */
    public CourierTable(Connection conn) {
        this.conn = conn;
    }

    @Override
    public String getTableName() {
        return TABLE_NAME;
    }

    @Override
    public boolean createTable() {
        final String query = "CREATE TABLE" + TABLE_NAME + "(" + "Cod_corriere int not null auto_increment,"
                + "Codice_fiscale char(16) not null," + "Nome varchar(20) not null," + "Cognome varchar(20) not null,"
                + "Data_di_nascita date not null," + "Cod_patente varchar(20) not null,"
                + "Nazionalita_patente varchar(25) not null," + "constraint IDCORRIERE_1 primary key (Cod_corriere))";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.executeUpdate(query);
            return true;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public boolean dropTable() {
        final String query = "DROP TABLE " + TABLE_NAME;
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.executeUpdate(query);
            return true;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public Optional<CourierPK> findByPrimaryKey(Integer primaryKey) {
        final String query = "SELECT * FROM " + TABLE_NAME + " WHERE Cod_corriere=?";
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, primaryKey);
            var result = statement.executeQuery();
            return convertResultSet(result).stream().findFirst();
        } catch (final SQLException e) {
            return Optional.empty();
        }
    }

    private List<CourierPK> convertResultSet(ResultSet result) {
        final List<CourierPK> list = new ArrayList<>();
        if (result != null) {
            try {
                while (result.next()) {
                    list.add(new CourierPK(result.getInt("Cod_corriere"), result.getString("Codice_fiscale"),
                            result.getString("Nome"), result.getString("Cognome"),
                            DateConverter.sqlDateToDate(result.getDate("Data_di_nascita")),
                            result.getString("Cod_patente"), result.getString("Nazionalita_patente")));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return list;
    }

    @Override
    public List<CourierPK> findAll() {
        final String query = "SELECT * FROM " + TABLE_NAME;
        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            var result = statement.executeQuery();
            return convertResultSet(result);
        } catch (final SQLException e) {
            return List.of();
        }
    }

    /**
     * Saves the Courier into the db
     */
    public Optional<CourierPK> save(Courier value) {
        final String query = "INSERT INTO " + TABLE_NAME + " (Codice_fiscale, Nome, Cognome,"
                + " Data_di_nascita, Cod_patente, Nazionalita_patente) VALUES (?,?,?,?,?,?)";

        try (final PreparedStatement statement = this.conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, value.getCodFis());
            statement.setString(2, value.getName());
            statement.setString(3, value.getSurname());
            statement.setDate(4, DateConverter.dateToSqlDate(value.getDateBirth()));
            statement.setString(5, value.getCodDrivingLic());
            statement.setString(6, value.getDrivingNat());
            final var r = statement.executeUpdate();
            if (r == 1) {
                try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        return Optional.ofNullable(new CourierPK(generatedKeys.getInt(1), value));
                    }
                }
            }
        } catch (final SQLException e) {
            return Optional.empty();
        }
        return Optional.empty();
    }

    /**
     * {@inheritDoc} Since the Cod_corriere is a value generated by the Database,
     * all CourierPK will be cast to Courier and Cod_courier values will be ignored
     */
    @Override
    public Optional<CourierPK> save(CourierPK value) {
        return this.save(CourierPK.convertToCourier(value));
    }

    @Override
    public boolean update(CourierPK value) {
        final String query = "UPDATE " + TABLE_NAME + " SET Codice_fiscale=?, Nome=?, Cognome=?,"
                + " Data_di_nascita=?, Cod_patente=?, Nazionalita_patente=? WHERE Cod_corriere=?";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setString(1, value.getCodFis());
            statement.setString(2, value.getName());
            statement.setString(3, value.getSurname());
            statement.setDate(4, DateConverter.dateToSqlDate(value.getDateBirth()));
            statement.setString(5, value.getCodDrivingLic());
            statement.setString(6, value.getDrivingNat());
            statement.setInt(7, value.getCod_corriere());
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

    @Override
    public boolean delete(Integer primaryKey) {
        final String query = "DELETE FROM " + TABLE_NAME + " WHERE Cod_corriere=?";

        try (final PreparedStatement statement = this.conn.prepareStatement(query)) {
            statement.setInt(1, primaryKey);
            final var r = statement.executeUpdate();
            return r == 1;
        } catch (final SQLException e) {
            return false;
        }
    }

}
